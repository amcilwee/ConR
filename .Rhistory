library(ConR)
library(ConR)
library(ads)
library(spatstat)
library(raster)
library(SDMTools)
library(maptools)
setwd("C:/MonDossierR/SDM")
source("C:/MonDossierR/IUCN evaluation/IUCN_eval function_v9.R")
source("functions computing area shapefiles.R")
africa <- readShapePoly("africa3m",proj4string=CRS ("+proj=longlat +datum=WGS84"))
continent <- readShapePoly("continent",proj4string=CRS ("+proj=longlat +datum=WGS84"))
Data_forests <- read.table("Extract_forests_ALL.txt")
XY_Std <- read.table("XY_Std.txt")
evaluated_sp <- cbind(XY_Std, rep("esp1", nrow(XY_Std)))
evaluated_sp <- evaluated_sp[,c(2,1,3)]
colnames(evaluated_sp) <- c("ddlat","ddlong",	"tax")
IUCN <- IUCN_eval(evaluated_sp,
Cell_size_AOO=2, Cell_size_locations=10, DrawMap=F, country_map=africa,
add.legend=F, exlude_ocean_EOO=T)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
library(ConR)
LIST_FILES <- list.files("C:/Users/dauby/Documents/ArcGIS/SIG/Future climate layers/Africlim/baseline_full/used_variables/", all.files = FALSE,
full.names = TRUE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
Names_var <- c("Mean.ann.temp","Mean.temp.warmq","Mean.temp.coolq",
"Ann.rain","Rain.wet.m","Rain.dry.m","Rain.seas",
"Rain.wet.q","Rain.dry.q","Mean.diurn.rang.temp","Isotherm",
"Temp.season","Max.temp.warm.m","Min.temp.cool.m","Ann.temp.range",
"Ann.wat.bal","dry.q.wat.bal","rainfall.deficit","wat.bal.season")
all_var <- list()
for (i in 1:length(LIST_FILES)){
LIST_FILES[[i]]
RAST <- raster(LIST_FILES[[i]])
RAST_agr <- raster::aggregate(RAST, fact =2, fun = mean, expand = FALSE, na.rm = TRUE, overwrite = TRUE)
crs(RAST_agr) <- ("+proj=laea +lat_0=90.0 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
names(RAST_agr) <- Names_var[i]
all_var[[i]] <- RAST_agr
}
all_var <- stack(all_var)
selected.var <- which(names(all_var) %in% c("Mean.ann.temp","Temp.season","Min.temp.cool.m","rainfall.deficit","wat.bal.season","Ann.wat.bal"))
all_var <- all_var[[selected.var]]
selected.var
z <- all_var[[selected.var]]
selected.var
selected.var <- which(names(all_var) %in% c("Mean.ann.temp","Temp.season","Min.temp.cool.m","rainfall.deficit","wat.bal.season","Ann.wat.bal"))
all_var <- all_var[[selected.var]]
selected.var <- which(names(all_var) %in% c("Mean.ann.temp","Temp.season","Min.temp.cool.m","rainfall.deficit","wat.bal.season","Ann.wat.bal"))
selected.var
selected.var
all_var
z <- all_var
env.df <- getValues(z)
env.df <- env.df[-unique(which(is.na(env.df),
arr.ind = T)[, 1]), ]
pca.object <- ade4::dudi.pca(env.df, scannf = F, nf = 2)
brks2 <-quantile(seq(from=min(pca.object$li[,1]),to=max(pca.object$li[,1]),by=1), probs=seq(0,1,0.2))
brks3 <-quantile(seq(from=min(pca.object$li[,1]),to=max(pca.object$li[,2]),by=1), probs=seq(0,1,0.2))
Coordinates_PCA <- cbind(pca.object$li ,findInterval(pca.object$li[,1], brks2 , all.inside =T),findInterval(pca.object$li[,2], brks3 , all.inside =T))
Pruning_distribution <- T
sampling_bias <- F
All_Sampled_sp <- c()
All_Sampled_sp_pruned <- c()
i=1
Nbe=0
while(Nbe<25){
#      my.pca.species <- generateSpFromPCA(raster.stack = z,
#                                          means = c(runif(1, min=-9, max=9),runif(1, min=-7, max=10)), sds = c(runif(1, 0.5, 2),runif(1, 0.5, 2)), plot=FALSE)
#
#      my.pca <- my.first.run$details$pca
Axis <- sample( c(3,4), 1)
Category <- sample(unique(Coordinates_PCA[,Axis]),1)
sub_PCA <- pca.object$li[which(Coordinates_PCA[,Axis]==Category),]
means <- as.numeric(sub_PCA[floor(runif(1, 1, nrow(sub_PCA))),1:2])
if(Category==2 || Category==3 || Category==4) {Stand_dev <- 0.1}else{Stand_dev <- 0.2}
my.pca.species <- generateSpFromPCA(raster.stack = z,
means = means,
sds = c(Stand_dev, Stand_dev), plot=T,pca = pca.object)
Nbe<- length(which(values(my.pca.species$suitab.raster)>0.5)) #### Number of pixel for which the probability is >0.5
print(Nbe/length(values(my.pca.species$suitab.raster)))
}
library(virtualspecies)
my.pca.species <- generateSpFromPCA(raster.stack = z,
means = means,
sds = c(Stand_dev, Stand_dev), plot=T,pca = pca.object)
Nbe<- length(which(values(my.pca.species$suitab.raster)>0.5)) #### Number of pixel for which the probability is >0.5
print(Nbe/length(values(my.pca.species$suitab.raster)))
Nbe
PA_DATA <- convertToPA(my.pca.species, plot = T,
beta = 0.6, alpha = -0.05)
print(table(values(PA_DATA$pa.raster))) ### Give the number of presence (0) and absence (1)
Sampled_sp <- NULL
presence.points <-NULL
if(length(which(values(PA_DATA$pa.raster)==1))>20) { ### Conduct the sampling of the species only if the number of pixel where it is present is >20
if(!sampling_bias) presence.points <- sampleOccurrences(PA_DATA,
n = 15, # The number of points to sample
type = "presence only")
if(sampling_bias){
#       z1 <- as.matrix(as.data.frame(my.pca.species$suitab.raster))
#       if(any(is.na(z1)))  z2 <- z1[which(!is.na(z1[,1])),]
#       z_pres <- as.matrix(as.data.frame(PA_DATA$pa.raster))
#       if(any(is.na(z_pres)))  z_pres <- z_pres[which(!is.na(z1[,1])),]
#       z_sampling <- as.matrix(as.data.frame(r2))
#       if(any(is.na(z_sampling)))  z_sampling <- z_sampling[which(!is.na(z1[,1])),]
#
#       z_full <- cbind(z2, z_pres, z_sampling)
#
#
#       PresAbsSimul <- matrix(NA,length(z2),1)
#       for (i in which(z_full[,2]>0 & z_full[,3]>0)) PresAbsSimul[i,] <- rbinom(1, size=z_sampling[i], prob=z2[i])
#       PresAbsSimul[which(PresAbsSimul>0)]
#
#       z_full <- cbind(z_full, rep(0,nrow(z_full)))
#       z_full[which(z_full[,2]>0 & z_full[,3]>0),4] <- PresAbsSimul[which(z_full[,2]>0 & z_full[,3]>0)]
#       z_full[which(z_full[,2]>0 & z_full[,3]>0),]
#       SuitaB <- suitability[which(!is.na(suitability))]
#
bias.raster <- r2 * PA_DATA$pa.raster
#
#       sample.points <- dismo::randomPoints(bias.raster, n = 60, prob = TRUE, tryf = 2)
### If the number of pixels where the species can be potentially sampled is lower than (1/x)*the number of pixels where the species is present, do not sample the species
N <- length(which(values(bias.raster)[which(values(bias.raster>0))] > median(values(bias.raster)[which(values(bias.raster>0))])))
if(N>100) N <-100
#     if(length(which(values(bias.raster)[which(!is.na(values(bias.raster)))]>0))> length(which(values(PA_DATA$pa.raster)>0))/100) {
if(N>10) {
#         if(length(which(values(bias.raster)[which(!is.na(values(bias.raster)))]>0))> length(which(values(PA_DATA$pa.raster)>0))/10) N <- 60
#         if(length(which(values(bias.raster)[which(!is.na(values(bias.raster)))]>0))<= length(which(values(PA_DATA$pa.raster)>0))/10) N <- 30
presence.points <- sampleOccurrences(PA_DATA,
n = N, # The number of points to sample
type = "presence only", bias = "manual", weights = r2)
}
}
if(!is.null(presence.points)){
Sampled_sp <- cbind(presence.points$sample.points[,1:2], rep(paste("artificial_sp_",i, sep=""),nrow(presence.points$sample.points)))
colnames(Sampled_sp)[3] <- "Sp_names"
}
if(is.null(presence.points)) print("Fail to create artifical species")
}
Pruning_distribution
if(max(Sampled_sp[,1])-min(Sampled_sp[,1])>max(Sampled_sp[,2])-min(Sampled_sp[,2])) {y=1}else{y=2}
Index <- which(abs(Sampled_sp[,y]-median(Sampled_sp[,y]))==min(abs(Sampled_sp[,y]-median(Sampled_sp[,y]))))[1]
occurrences_loc <- Sampled_sp[,c(2:1)]; colnames(occurrences_loc) <- c("ddlon", "ddlat")
coordinates(occurrences_loc) <- c("ddlon", "ddlat")
DIST <-  gDistance(occurrences_loc, byid=T)
rownames(DIST)<- colnames(DIST) <- rownames(Sampled_sp)
FarPoints <- names(which(DIST[Index,]>stats::quantile(unique(c(DIST[Index,],DIST[,Index])), probs = 0.6, na.rm=T)))
Sampled_sp_pruned <- Sampled_sp[-which(rownames(Sampled_sp) %in% FarPoints),]
plot(PA_DATA$pa.raster)
library(ConR)
library(ConR)
install.packages("rmarkdown")
library(ConR)
install.packages("geosphere")
devtools::load_all(ConR)
install.packages("devtools")
devtools::load_all(ConR)
devtools::load_all(pkg="C:/MonDossierR/ConR_1.0.tar.gz")
plot(1)
install.packages("geosphere")
library(ConR)
library(ConR)
library(ConR)
library(ConR)
git init
